image: harbor.wks.wistron.com.cn/base_image/node-java-chrome-e2e:latest

# cache
cache:
  untracked: true
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - node_modules/

stages:
  - prepare
  - setup
  - build
  # - build_for_test
  # - deploy_for_test
  - deploy
  - update

install-package:
  stage: prepare
  script:
    - npm i && npm i -g @angular/cli
  tags:
    - wks-runner01

ng-build:
  image: harbor.wks.wistron.com.cn/base_image/ng-cli-karma
  stage: build
  dependencies:
    - install-package
  script:
    - ng build --prod && cp ./nginx-custom.conf ./dist/nginx-custom.conf
  tags:
    - wks-runner01
  artifacts:
    paths:
      - ./dist/som/
    when: always
    expire_in: 1 days

build_test_image:
  only:
    - master
    - production
    - /^pre-production.*$/
  stage: build_for_test
  image: harbor.wks.wistron.com.cn/base_image/docker:stable
  tags:
    - wks-runner01
  variables:

  script:
    - echo "this is docker image packing for TEST"
    - docker build -t ${BUILD_IMAGE_NAME}:${DOCKER_TEST_IMAGE_TAG} --rm=true .
    - docker tag ${BUILD_IMAGE_NAME}:${DOCKER_TEST_IMAGE_TAG} ${HARBOR_URL}/${HARBOR_PROJECT}/${BUILD_IMAGE_NAME}:${DOCKER_TEST_IMAGE_TAG}
    - echo "${HARBOR_PASSWORD}" | docker login -u "${HARBOR_USER}" --password-stdin ${HARBOR_URL}
    - docker push ${HARBOR_URL}/${HARBOR_PROJECT}/${BUILD_IMAGE_NAME}:${DOCKER_TEST_IMAGE_TAG}

deploy_for_test:
  only:
    - master
    - production
    - /^pre-production.*$/
  stage: deploy_for_test
  image: harbor.wks.wistron.com.cn/base_image/rancher-deploy-tool:latest
  tags:
    - wks-runner01
  variables:

  script:
    - ls -al
    - deploy -n ${SERVICE_NAME} -i ${HARBOR_URL}/${HARBOR_PROJECT}/${BUILD_IMAGE_NAME}:${DOCKER_TEST_IMAGE_TAG} -m 4200

get_version:
  only:
    - master
    - /^pre-production.*$/
    - production
    - forkprd
    - /^fix-.*$/
  image: harbor.wks.wistron.com.cn/base_image/alpine:3.10
  stage: setup
  tags:
    - wks-runner01
  before_script:
    - apk add curl
    - apk add jq
    - . ci-funcs.sh
  script:
    - get_version
  artifacts:
    paths:
      - build-vars.sh
    when: always
    expire_in: 1 days

# vulnerability_scan:
#   image: harbor.wks.wistron.com.cn/base_image/zap2docker-stable:latest
#   tags:
#     - wks-runner01
#   stage: vulnerability_scan
#   before_script:
#     - cp -r ./dist/* /usr/share/nginx/html
#     - cp ./nginx-custom.conf /etc/nginx/conf.d/default.conf
#     - /etc/init.d/nginx start
#     - . ci-funcs.sh
#   script:
#     - zap_scan
#   artifacts:
#     paths:
#       - ./report.xml
#     when: always
#     expire_in: 1 days

# code_scan:
#   image: harbor.wks.wistron.com.cn/base_image/sonar-scanner-cli:4
#   except:
#     - tags
#   stage: code_scan
#   tags:
#     - wks-runner01
#   before_script:
#     - if test "${SOURCEPJ}" != "true"; then echo "Not Source Code Project, exit ci."; exit 0; fi;
#   script:
#     - sonar-scanner -Dsonar.projectName=$CI_PROJECT_NAME -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_TOKEN} -Dsonar.javascript.lcov.reportPaths=./coverage/lcov.info -Dsonar.zaproxy.reportPath=./report.xml

docker-build:
  only:
    - master
    - production
    - /^pre-production.*$/
    - /^fix-.*$/
  image: harbor.wks.wistron.com.cn/base_image/vc-tool:latest
  stage: deploy
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  tags:
    - wks-runner01
  before_script:
    - source build-vars.sh
    - echo ${SYS_VER}
    - . ci-funcs.sh
  script:
    - docker_build
  artifacts:
    paths:
      - build-vars-docker_build.sh
    when: always
    expire_in: 1 days

update:
  only:
    - master
    - /^pre-production.*$/
    - production
    - forkprd
    - /^fix-.*$/
  tags:
    - wks-runner01
  stage: update
  image: harbor.wks.wistron.com.cn/base_image/alpine:3.10
  before_script:
    - apk add curl
    - apk add jq
    - export CI_JOB_TIMESTAMP=$(date +"%s")
    - |
      {
        source build-vars-docker_build.sh;
      } || {
        echo "No need to update.";
        exit 0;
      }
    - echo ${SYS_VER}
    - . ci-funcs.sh
  script:
    - cd_update
